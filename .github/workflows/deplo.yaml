name: Deploy Website to Server via SSH

on:
  push:
    branches:
      - main

jobs:
  deploy:
    runs-on: ubuntu-latest

    steps:
      # Step 1: Checkout the repository
      - name: Checkout repository
        uses: actions/checkout@v3

      # Step 2: Install SSHpass (required for password-based SSH)
      - name: Install SSHpass
        run: |
          sudo apt-get update
          sudo apt-get install -y sshpass

      # Step 3: SSH into the server and execute the deployment commands
      - name: Deploy via SSH
        env:
          SERVER_IP: ${{ secrets.SERVER_IP }}
          SERVER_PASSWORD: ${{ secrets.SERVER_PASSWORD }}
          USER: root
        run: |
          sshpass -p "$SERVER_PASSWORD" ssh -o StrictHostKeyChecking=no $USER@$SERVER_IP << 'EOF'

            # Variables
            REPO_NAME=${{ github.repository }}
            REPO_NAME=${REPO_NAME//\//_} # Replace "/" in repo name

            # Create the project directory if it doesn't exist
            if [ ! -d "/var/www/$REPO_NAME" ]; then
              echo "Creating directory /var/www/$REPO_NAME..."
              mkdir -p /var/www/$REPO_NAME
              chown $USER:$USER /var/www/$REPO_NAME
            fi

            # Navigate to the project directory
            cd /var/www/$REPO_NAME

            # Clone or pull the repository
            if [ ! -d ".git" ]; then
              echo "Cloning repository..."
              git clone https://github.com/${{ github.repository }} .
            else
              echo "Pulling latest changes..."
              git reset --hard # Reset any local changes
              git pull origin main
            fi

            # Install dependencies if package.json exists
            if [ -f "package.json" ]; then
              echo "Installing dependencies..."
              npm install --production
            else
              echo "No package.json found, skipping dependency installation."
            fi

            # Start or restart the application using PM2
            if pm2 list | grep -q "$REPO_NAME"; then
              echo "Restarting PM2 process..."
              pm2 restart "$REPO_NAME"
            else
              echo "Starting PM2 process..."
              pm2 start npm --name "$REPO_NAME" -- start
              pm2 save  # Save PM2 configuration to restart on reboot
            fi

            # Secondary PM2 logic to ensure process runs if no existing configuration found
            if ! pm2 list | grep -q "$REPO_NAME"; then
              echo "PM2 process not found, proceeding to start PM2 step..."
              pm2 start npm --name "$REPO_NAME" -- start || echo "Failed to start PM2 process."
              pm2 save  # Save PM2 configuration to restart on reboot
            fi

            # Save PM2 process list to ensure restart on server reboot
            echo "Saving PM2 process list..."
            pm2 save

            # Ensure PM2 startup script is enabled
            pm2 startup systemd -u $USER --hp /home/$USER
            systemctl enable pm2-$USER
            systemctl start pm2-$USER

          EOF
