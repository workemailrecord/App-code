name: Deploy Website to Server via SSH

on:
  push:
    branches:
      - main

jobs:
  deploy:
    runs-on: ubuntu-latest

    steps:
      # Step 1: Checkout the repository
      - name: Checkout repository
        uses: actions/checkout@v3

      # Step 2: Set up SSH key for authentication
      - name: Set up SSH key
        run: |
          mkdir -p ~/.ssh
          echo "${{ secrets.EC2_PRIVATE_KEY }}" > ~/.ssh/duwin.pem
          chmod 600 ~/.ssh/duwin.pem
          ssh-keyscan -H ${{ secrets.EC2_HOST }} >> ~/.ssh/known_hosts

    # Step 3: SSH into the server and execute the deployment commands
      - name: Deploy via SSH
        run: |
          ssh -i ~/.ssh/duwin.pem -o StrictHostKeyChecking=no ${{ secrets.EC2_USER }}@${{ secrets.EC2_HOST }} << 'EOF'
                      # Extract the repository name from the GitHub repository environment variable
            REPO_NAME=${{ github.repository }}
            # Replace "/" in the repository name (since GitHub repositories use "owner/repo" format)
            REPO_NAME=${REPO_NAME//\//_}
            
            # Create the directory if it doesn't exist (using sudo)
            if [ ! -d "/var/www/$REPO_NAME" ]; then
              echo "Directory /var/www/$REPO_NAME does not exist. Creating it now."
              sudo mkdir -p /var/www/$REPO_NAME
              sudo chown $USER:$USER /var/www/$REPO_NAME
            else
              echo "Directory /var/www/$REPO_NAME already exists."
            fi

            # Navigate to the project directory
            cd /var/www/$REPO_NAME

            # If this is a new project or the directory is not a Git repository, clone it
            if [ ! -d ".git" ]; then
              echo "No Git repository found, cleaning the directory and cloning the repository..."
              rm -rf /var/www/$REPO_NAME/* # Clean the existing files
              git clone https://github.com/${{ github.repository }} .
            else
              echo "Git repository exists, pulling the latest changes..."
              git pull origin main
            fi

            # Install necessary dependencies if package.json is found
            if [ -f "package.json" ]; then
              echo "Installing npm dependencies..."
              npm install
            else
              echo "No package.json found, skipping npm install."
            fi

            # Restart the application using PM2 if processes are running
            if pm2 list | grep -q "$REPO_NAME"; then
              echo "PM2 processes found, restarting all..."
              pm2 restart all
            else
              echo "No PM2 processes found, starting application..."
              pm2 start npm --name "$REPO_NAME" -- start
            fi

            # Apache Virtual Host Configuration
            APACHE_CONF="/etc/apache2/sites-available/$REPO_NAME.conf"
            if [ ! -f "$APACHE_CONF" ]; then
              echo "Creating Apache Virtual Host configuration for $REPO_NAME"
              
              # Create the Apache config file for the domain
              sudo bash -c "cat > $APACHE_CONF <<EOL
<VirtualHost *:80>
    ServerAdmin webmaster@$REPO_NAME
    ServerName $REPO_NAME
    DocumentRoot /var/www/$REPO_NAME
    ErrorLog \${APACHE_LOG_DIR}/error.log
    CustomLog \${APACHE_LOG_DIR}/access.log combined
</VirtualHost>
EOL"
              
              # Enable the new site configuration
              sudo a2ensite $REPO_NAME.conf
              sudo systemctl reload apache2
            else
              echo "Apache configuration for $REPO_NAME already exists."
            fi

            # SSL Configuration with Certbot (Let's Encrypt)
            if ! sudo certbot certificates | grep -q "$REPO_NAME"; then
              echo "SSL certificate not found for $REPO_NAME, acquiring one..."
              sudo certbot --apache -d $REPO_NAME --non-interactive --agree-tos --email your-email@example.com
              sudo systemctl reload apache2
            else
              echo "SSL certificate already exists for $REPO_NAME."
            fi
          EOF

      # Step 4: Clean up SSH key after use
      - name: Clean up SSH key
        run: rm -f ~/.ssh/duwin.pem
